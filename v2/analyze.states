TRANSACTION PACKET,TIMESTAMP
  Initial
    if type == "PACKET"
    if token == "SETUP"
    fork
    mark
    set seen_upstream 0
    capture token token
    capture address address
    capture endpoint endpoint
    next Setup

  Initial
    if type == "PACKET"
    if token == "IN" "OUT"
    fork
    mark
    set seen_upstream 0
    capture token token
    capture address address
    capture endpoint endpoint
    next InOut

  Initial
    if type == "TIMESTAMP"
    capture timestamp_first timestamp

  Initial
    if type == "PACKET"
    if token == "PING"
    fork
    mark
    capture token token
    capture address address
    capture endpoint endpoint
    next WaitPing

  # stray packets...
  Initial
    fork
    mark
    capture token token
    set seen_upstream 0
    emit

  InOut
    if type == "PACKET"
    if token == "DATA0" "DATA1"
    capture token_data token
    capture data data
    set seen_upstream 1
    mark
    next WaitAck

  InOut
    if type == "PACKET"
    if token == "STALL" "NAK" "NYET"
    # well, we _would_ have seen the data (maybe)
    set seen_upstream 1
    capture token_result token
    mark
    emit

  # if we don't see upstream data, we only see IN -> ACK
  InOut
    if type == "PACKET"
    if token == "ACK"
    capture token_result token
    capture data
    mark
    emit

  InOut
    if type == "TIMESTAMP"
    capture timestamp_last timestamp

  # if we don't see upstream data, we only see OUT (or whatever) and then something else that comes from the host.
  InOut
    if type == "PACKET"
    capture token_result
    emit

  Setup
    if type == "PACKET"
    if token == "DATA0"
    capture data data
    mark
    next WaitAck

  Setup
    if type == "TIMESTAMP"
    capture timestamp_last timestamp

  WaitAck
    if type == "PACKET"
    if token == "ACK" "NAK" "NYET"
    set seen_upstream 1
    capture token_result token
    mark
    emit

  WaitAck
    if type == "TIMESTAMP"
    capture timestamp_last timestamp

  # if we're waiting for ACK/NAK/NYET but saw somehting else, we likely just missed the upstream token; abort
  WaitAck
    if type == "PACKET"
    set seen_upstream 0
    emit

  WaitPing
    if type == "PACKET"
    if token == "ACK" "NAK" "STALL"
    set seen_upstream 1
    capture token_result token
    mark
    emit

  WaitPing
    if type == "TIMESTAMP"
    capture timestamp_last timestamp

#
# Transfer Properties:
#
# token = SETUP/IN/OUT
# address
# endpoint
# token_data (for SETUP only)
# data_setup (for SETUP only)
# data
#

TRANSFER TRANSACTION,TIMESTAMP
  Initial
    if type == "TRANSACTION"
    if seen_upstream == "0"
    mark

  # SETUP?
  Initial
    if type == "TRANSACTION"
    if token == "SETUP"
    fork
    mark
    capture data_setup data
    capture address address
    capture endpoint endpoint
    capture token token
    set data
    next Setup_First_Data

  # IN/OUT?
  Initial
    if type == "TRANSACTION"
    if token == "IN" "OUT"
    if token_result == "ACK"
    if data != ""
    fork
    capture address address
    capture endpoint endpoint
    capture data data
    capture token token
    capture token_result token_result
    mark

    # conditional: if interrupt, or if bulk with non-max sized data
    emit
    #next MoreData

  # IN/OUT with NAK
  Initial
    if type == "TRANSACTION"
    if token == "IN" "OUT"
    if token_result == "NAK"
    fork
    capture address address
    capture endpoint endpoint
    capture token token
    capture token_result token_result
    capture data
    mark
    next MoreData

  Initial
    if type == "TRANSACTION"
    if token == "IN" "OUT"
    if data == ""
    fork
    capture address address
    capture endpoint endpoint
    capture data data
    capture token token
    capture token_result token_result
    mark
    emit

  # capture first timestamp
  Initial
    if type == "TIMESTAMP"
    capture timestamp_first timestamp

  # ignore PING
  Initial
    if type == "TRANSACTION"
    if token == "PING"

  # SETUP -> IN/OUT w. ACK
  Setup_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token == "IN" "OUT"
    if token_result == "ACK"
    if data != ""
    capture data data
    capture token_data token
    mark
    next Setup_More_First_Data

  # SETUP -> IN/OUT w. ACK but zero data
  Setup_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token == "IN" "OUT"
    if token_result == "ACK"
    capture data data
    capture token_data token
    capture token_result token_result
    mark
    emit

  # SETUP -> IN/OUT w. NAK/NYET (stay in state)
  Setup_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token == "IN" "OUT"
    if token_result == "NAK" "NYET"
    capture data
    capture token_data
    mark

  # SETUP -> IN/OUT w. NAK/NYET -> PING (stay in state)
  Setup_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token == "PING"
    capture data
    capture token_data
    mark

  # SETUP -> IN/OUT w. STALL
  Setup_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token == "IN" "OUT"
    if token_result == "STALL"
    capture token_result token_result
    capture token_data token
    mark
    emit

  # other tokens to the same endpoints abort this transfer
  Setup_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    emit

  # if data from another address/endpoint ignore
  Setup_First_Data
    if type == "TRANSACTION"

  Setup_First_Data
    if type == "TIMESTAMP"

  # SETUP -> IN/OUT -> ACK -> IN/OUT -> ACK, more data, append and stay in state
  Setup_More_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token_result == "ACK"
    if token == token_data
# FIXME, we need a "second_data" phase    if data != ""
    append data data
    mark

  # NAK'ed transaction
  Setup_More_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token == token_data
    if token_result == "NAK" "NYET"
    mark

  Setup_More_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token == "PING"
    mark

  # the opposite setup transaction may NAK as well, but NYET mysteriously makes the transfer finish.
  Setup_More_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token == "IN" "OUT"
    if token != token_data
    if token_result == "NAK"
    mark

  # transaction to same address/endpoint but different token must be zero data and ends setup
  # for some reason, NYET is also acceptable.
  Setup_More_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if data == ""
    if token == "IN" "OUT"
    if token != token_data
    if token_result == "ACK" "NYET"
    capture token_result token_result
    mark
    emit

  # transaction of different type to same address/endpoint but different token with data is illegal
  Setup_More_First_Data
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    complain

  # if data from another address/endpoint ignore
  Setup_More_First_Data
    if type == "TRANSACTION"

  Setup_More_First_Data
    if type == "TIMESTAMP"

  MoreData
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token_result == "ACK"
    if token == token
    if data != ""
    append data data
    capture token_result token_result
    mark
    # conditional: if interrupt, or if bulk with non-max sized data
    emit

  # ACK'ed transaction with zero data ends transfer
  MoreData
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token_result == "ACK"
    if token == token
    if data == ""
    capture token_result token_result
    mark
    emit

  # NAK'ed, wait
  MoreData
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    if token_result == "NAK" "NYET"
    capture token_result token_result
    mark

  # transaction to same address/endpoint but different token created a new transfer
  MoreData
    if type == "TRANSACTION"
    if address == address
    if endpoint == endpoint
    emit

  MoreData
    if type == "TRANSACTION"

  MoreData
    if type == "TIMESTAMP"
